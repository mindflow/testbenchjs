'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreutil_v1 = require('coreutil_v1');

class AssertString {

    static assertEquals(expected, actual) {
        if (expected === actual) {
            return;
        }
        throw "String Assertion Failed. Expected: '" + expected + "' Actual: '" + actual + "'";
    }

}

class TestTrigger {

        /**
     * Run test by class name
     * @param {string} className 
     */
    runSingle(className) {

    }

    /**
     * Run all test classes
     */
    run() {
        
    }
}

const LOG = new coreutil_v1.Logger("TestBench");

class TestBench extends TestTrigger {

    /**
     * 
     * @param {ObjectFunction} listener 
     */
    constructor(listener = null) {
        
        super();

        /** @type {ObjectFunction} */
        this.listener = listener;

        /** @type {Map} */
        this.testMap = new coreutil_v1.Map();

        /** @type {List} */
        this.successTestMap = new coreutil_v1.List();

        /** @type {List} */
        this.failTestMap = new coreutil_v1.List();
    }

    /**
     * 
     * @param {Object} testObject 
     * @returns {TestBench}
     */
    addTest(testClass) {
        if (!testClass.testFunctions || !(testClass.testFunctions() instanceof coreutil_v1.List)) {
            throw "A static function called 'testFunctions' must be provided in " 
                + testClass.name 
                + " which returns a List all the test functions in "
                + testClass.name + ".prototype"
        }
        this.testMap.set(testClass.name, testClass);
        return this;
    }

    contains(testClass) {
        return this.testMap.contains(testClass.name);
    }

    named(className) {
        this.printHeader(className);

        const testClass = this.testMap.get(className);
        const testObject = new testClass();

        /** @type {List} */
        const testFunctions = testClass.testFunctions();

        testFunctions.forEach((value, parent) => {
            /** @type {Function} */
            const testFunction = value;
            try {
                testFunction.call(testObject);
                this.successTestMap.add(testClass.name + "." + testFunction.name + "()");
            } catch (exception) {
                LOG.error("Test: " + testClass.name + "." + testFunction.name + "() failed. Reason:");
                LOG.error(exception);
                LOG.error("");
                this.failTestMap.add(testClass.name + "." + testFunction.name + "()");
            }
            return true;
        });
    }

    /**
     * Run test by class name
     * @param {string} className 
     */
    runSingle(className) {
        coreutil_v1.Logger.listener = this.listener;
        this.named(className);
        this.printReport();
        this.reset();
        coreutil_v1.Logger.clearListener();
    }

    /**
     * Run all test classes
     */
    run() {
        coreutil_v1.Logger.listener = this.listener;
        this.testMap.forEach((key, value, parent) => {
            this.named(key);
            return true;
        });
        this.printReport();
        this.reset();
        coreutil_v1.Logger.clearListener();
    }

    printHeader(testName) {
        const line = "#  Running test: " + testName + "  #";
        let decoration = "";
        for (let i = 0; i < line.length ; i++) {
            decoration = decoration + "#";
        }
        LOG.info(decoration);
        LOG.info(line);
        LOG.info(decoration);
        LOG.info("");
    }

    printReport() {
        LOG.info("###################");
        LOG.info("#   Test Report   #");
        LOG.info("###################");
        LOG.info("");

        LOG.info("Succeeded:");
        let successCounter = 0;
        this.successTestMap.forEach((value,parent) => {
            LOG.info(successCounter++ + ". " + value);
        });
        LOG.info("");

        LOG.info("Failed:");
        let failCounter = 0;
        this.failTestMap.forEach((value,parent) => {
            LOG.info(failCounter++ + ". " + value);
        });
        LOG.info("");

        if (this.fails != 0) {
            throw this.failTestMap.size() + "Tests failed";
        }
    }

    reset() {
        this.failTestMap = new coreutil_v1.List();
        this.successTestMap = new coreutil_v1.List();
    }
}

exports.AssertString = AssertString;
exports.TestBench = TestBench;
exports.TestTrigger = TestTrigger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
