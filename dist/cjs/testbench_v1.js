'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreutil_v1 = require('coreutil_v1');

class AssertString {

    static assertEquals(expected, actual) {
        if (expected === actual) {
            return;
        }
        throw "String Assertion Failed. Expected: '" + expected + "' Actual: '" + actual + "'";
    }

}

const executionLogMap = new coreutil_v1.Map();

class ExecutionLog {

    constructor(testName, listener) {
        this.testName = testName;
        this.listener = listener;
        /** @type {Logger} */
        this.log = new coreutil_v1.Logger(testName);
    }

    static create(testName) {
        if (!executionLogMap.contains(testName)) {
            executionLogMap.set(testName, new ExecutionLog(testName));
        }
    }

    debug(message) {
        if (this.listener) {
            this.listener.call(message, coreutil_v1.Logger.DEBUG);
        }
        this.log.debug(message);
    }

    info(message) {
        if (this.listener) {
            this.listener.call(message, coreutil_v1.Logger.INFO);
        }
        this.log.info(message);
    }

    warn(message) {
        if (this.listener) {
            this.listener.call(message, coreutil_v1.Logger.WARN);
        }
        this.log.warn(message);
    }

    error(message) {
        if (this.listener) {
            this.listener.call(message, coreutil_v1.Logger.ERROR);
        }
        this.log.error(message);
    }

    fatal(message) {
        if (this.listener) {
            this.listener.call(message, coreutil_v1.Logger.FATAL);
        }
        this.log.fatal(message);
    }

}

const LOG = new coreutil_v1.Logger("TestBench");

class TestBench {

    constructor() {
        this.executionLogMap = new coreutil_v1.Map();

        this.testMap = new coreutil_v1.Map();

        this.successTestMap = new coreutil_v1.List();
        this.failTestMap = new coreutil_v1.List();
    }

    /**
     * 
     * @param {Object} testObject 
     * @returns {TestBench}
     */
    addTest(name, testClass) {
        if (!testClass.testFunctions || !(testClass.testFunctions() instanceof coreutil_v1.List)) {
            throw "A static function called 'testFunctions' must be provided in " 
                + testClass.name 
                + " which returns a List all the test functions in "
                + testClass.name + ".prototype"
        }
        this.executionLogMap.set(name, new ExecutionLog("TestBench." + name));
        this.testMap.set(name, testClass);
        return this;
    }

    runNamed(name) {
        this.printHeader(name);
        const log = this.executionLogMap.get(name);
        const testClass = this.testMap.get(name);
        const testObject = new testClass();
        /** @type {List} */
        const testFunctions = testClass.testFunctions();
        testFunctions.forEach((value, parent) => {
            /** @type {Function} */
            const testFunction = value;
            try {
                testFunction.call(testObject);
                this.successTestMap.add(testClass.name + "." + testFunction.name + "()");
            } catch (exception) {
                log.error("Test: " + testClass.name + "." + testFunction.name + "() failed. Reason:");
                log.error(exception);
                log.error("");
                this.failTestMap.add(testClass.name + "." + testFunction.name + "()");
            }
            return true;
        });
    }

    runSingle(name) {
        this.runNamed(name);
        this.printReport();
        this.reset();
    }

    run() {
        this.testMap.forEach((key, value, parent) => {
            this.runNamed(key);
            return true;
        });
        this.printReport();
        this.reset();
    }

    printHeader(testName) {
        const log = this.executionLogMap.get(testName);
        const line = "#  Running test: " + testName + "  #";
        let decoration = "";
        for (let i = 0; i < line.length ; i++) {
            decoration = decoration + "#";
        }
        log.info(decoration);
        log.info(line);
        log.info(decoration);
        log.info("");
    }

    printReport() {
        LOG.info("###################");
        LOG.info("#   Test Report   #");
        LOG.info("###################");
        LOG.info("");

        LOG.info("Succeeded:");
        let successCounter = 0;
        this.successTestMap.forEach((value,parent) => {
            LOG.info(successCounter++ + ". " + value);
        });
        LOG.info("");

        LOG.info("Failed:");
        let failCounter = 0;
        this.failTestMap.forEach((value,parent) => {
            LOG.info(failCounter++ + ". " + value);
        });
        LOG.info("");

        if (this.fails != 0) {
            throw this.failTestMap.size() + "Tests failed";
        }
    }

    reset() {
        this.failTestMap = new coreutil_v1.List();
        this.successTestMap = new coreutil_v1.List();
    }
}

class TestBenchView {
    
}

class TestEntry {
    
}

exports.AssertString = AssertString;
exports.ExecutionLog = ExecutionLog;
exports.TestBench = TestBench;
exports.TestBenchView = TestBenchView;
exports.TestEntry = TestEntry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
